<!DOCTYPE html>
<html>
  <head>
    <title>Rotating 3D Cube</title>
    <style>
      #canvas {
        width: 400px;
        height: 400px;
      }
    </style>
  </head>
  <body>
    <canvas id="canvas"></canvas>

    <script>
      // Set up the canvas and WebGL context
      const canvas = document.getElementById('canvas');
      const gl = canvas.getContext('webgl');

      // Vertex shader source code
      const vertexShaderSource = `
        attribute vec3 a_position;
        uniform mat4 u_matrix;

        void main() {
          gl_Position = u_matrix * vec4(a_position, 1.0);
        }
      `;

      // Fragment shader source code
      const fragmentShaderSource = `
        precision mediump float;

        void main() {
          gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
        }
      `;

      // Create and compile the vertex shader
      const vertexShader = gl.createShader(gl.VERTEX_SHADER);
      gl.shaderSource(vertexShader, vertexShaderSource);
      gl.compileShader(vertexShader);

      // Create and compile the fragment shader
      const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
      gl.shaderSource(fragmentShader, fragmentShaderSource);
      gl.compileShader(fragmentShader);

      // Create the shader program
      const program = gl.createProgram();
      gl.attachShader(program, vertexShader);
      gl.attachShader(program, fragmentShader);
      gl.linkProgram(program);
      gl.useProgram(program);

      // Get the attribute and uniform locations
      const positionAttributeLocation = gl.getAttribLocation(program, 'a_position');
      const matrixUniformLocation = gl.getUniformLocation(program, 'u_matrix');

      // Create the buffer and bind the cube's vertices
      const positionBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
      const vertices = [
        -1, -1, -1,   // Vertex 1
        1, -1, -1,    // Vertex 2
        1, 1, -1,     // Vertex 3
        -1, 1, -1,    // Vertex 4
        -1, -1, 1,    // Vertex 5
        1, -1, 1,     // Vertex 6
        1, 1, 1,      // Vertex 7
        -1, 1, 1      // Vertex 8
      ];
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);

      // Set up the position attribute
      gl.enableVertexAttribArray(positionAttributeLocation);
      gl.vertexAttribPointer(positionAttributeLocation, 3, gl.FLOAT, false, 0, 0);

      // Set up the perspective matrix
      const fieldOfView = 45 * Math.PI / 180;
      const aspect = canvas.clientWidth / canvas.clientHeight;
      const zNear = 0.1;
      const zFar = 100.0;
      const projectionMatrix = mat4.create();
      mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);

      // Start the animation
      let angle = 0;

      function render() {
        // Clear the canvas
        gl.clearColor(0, 0, 0, 1);
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Create the model view matrix


// CREATED WITH THE HELP OF OPEN-AI CHAT GPT: https://chat.openai.com/chat
